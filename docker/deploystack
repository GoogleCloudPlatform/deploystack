#!/bin/sh
CLEAR="[0m"
UCYAN="[4;36m"
BRED="[1;31m"

function deploystackError() {
  repo=$(git config --get remote.origin.url)
  echo
  echo "Deploystack - $BRED Error $CLEAR"
  echo "An error occurred collecting the necessary information to run your Deploystack"
  echo "application. Please try again."
  echo
  echo "If the problem persists, please file an issue with the Github repo:"
  echo "${repo/.git/}/issues"
  # Sometimes there's an issue where canceling out of DeployStack makes typing
  # in the terminal to disappear. This fixes that.
  stty sane
}

function repoError() {
  repoentered=$1
  candidate1="${UCYAN}https://github.com/GoogleCloudPlatform/${repoentered}${CLEAR}"
  
  echo
  echo "Deploystack - $BRED Error $CLEAR"
  echo
  echo "You entered $repoentered. "
  echo
  echo "The corresponding github repository:"
  echo "$candidate1"
  if [[ $repoentered != *"deploystack-"* ]]; then
    candidate2="${UCYAN}https://github.com/GoogleCloudPlatform/deploystack-${repoentered}${CLEAR}" 
    echo "or"
    echo "$candidate2"
    echo "do not exist."
  else
    echo "does not exist. "
  fi
  echo 
  echo "Please check the spelling."
  
  echo
  # Sometimes there's an issue where canceling out of DeployStack makes typing
  # in the terminal to disappear. This fixes that.
  stty sane
}

FAILED=false

case $1 in

"install")

  results=$(dsexec -verify)
  arr=($(echo "$results" | tr '|' '\n'))
  scriptsDIR=${arr[2]}

  if [ -f "$scriptsDIR/preinstall.sh" ]; then
    . $scriptsDIR/preinstall.sh
  fi

  DEBUG=true dsexec || FAILED=true

  if $FAILED; then
    deploystackError
    exit 1
  fi

  results=$(dsexec -verify)
  arr=($(echo "$results" | tr '|' '\n'))
  terraformDIR=${arr[0]}
  messagesDIR=${arr[1]}
  scriptsDIR=${arr[2]}
  stackname=$(dsexec -name)
  user_agent=deploystack/$stackname
  export TF_APPEND_USER_AGENT=$user_agent
  export TF_LOG=debug
  export TF_LOG_PATH=tfdebug.log

  mv terraform.tfvars $terraformDIR

  if [ -f "$scriptsDIR/preinit.sh" ]; then
    . $scriptsDIR/preinit.sh
  fi

  terraform -chdir="$terraformDIR" init

  if [ -f "$scriptsDIR/postinit.sh" ]; then
    . $scriptsDIR/postinit.sh
  fi

   if [ -f "$scriptsDIR/preapply.sh" ]; then
    . $scriptsDIR/preapply.sh
  fi

  terraform -chdir="$terraformDIR" apply -auto-approve -var-file=terraform.tfvars || FAILED=true

  if [ -f "$scriptsDIR/postapply.sh" ]; then
    . $scriptsDIR/postapply.sh
  fi

  if $FAILED; then
    deploystackError
    exit 1
  fi

  if [ -f "$scriptsDIR/postinstall.sh" ]; then
    . $scriptsDIR/postinstall.sh
  fi

  if [ -f "$messagesDIR/success.txt" ]; then
    cat $messagesDIR/success.txt
  fi
  ;;

"uninstall")
  results=$(dsexec -verify)
  arr=($(echo "$results" | tr '|' '\n'))
  terraformDIR=${arr[0]}
  messagesDIR=${arr[1]}
  scriptsDIR=${arr[2]}
  stackname=$(dsexec -name)
  user_agent=deploystack/$stackname
  export TF_APPEND_USER_AGENT=$user_agent
  export TF_LOG=debug
  export TF_LOG_PATH=tfdebug.log

  if [ -f "$scriptsDIR/predestroy.sh" ]; then
    . $scriptsDIR/predestroy.sh
  fi
  terraform -chdir="$terraformDIR" destroy -auto-approve -var-file=terraform.tfvars
  if [ -f "$scriptsDIR/postdestroy.sh" ]; then
   . $scriptsDIR/postdestroy.sh
  fi
  ;;
"repo")
  candidate=$2
  echo "Attempting to download the repo you selected: $candidate"
  folder=$(dsexec -repo $candidate)
  
  if [[ $folder == *"There was an issue collecting"* ]]; then 
    repoError $candidate
    exit 1
  fi

  cd $folder
  deploystack install
  ;;
"version")
  dsexec -version
  ;;

*)
  echo "DEPLOYSTACK"
  echo "type 'deploystack install' to install this DeployStack application"
  echo "or"
  echo "type 'deploystack uninstall' to uninstall this DeployStack application"
  echo "or"
  echo "type 'deploystack repo [a deploystack repo]' to download and install a DeployStack application"
  ;;
esac