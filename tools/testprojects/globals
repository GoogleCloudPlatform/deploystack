# Display Variables
BLACK='\033[0;30m'
WHITE='\033[1;37m'

CYAN='\033[0;36m'
BCYAN='\033[1;36m'
DCYAN='\033[2;36m'
ONCYAN="\033[36m"
UCYAN='\033[4;36m'

RED='\033[0;31m'
BRED='\033[1;31m'
ONRED="\033[41m"

BGREEN='\033[1;32m'
NC='\033[0m' # No Color

DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}

function await_command() {
    local __resultvar=$1
    local DURATION=$2
    local limit=$3
    local OP=$4
    local NAME=$5
    local REGION=$6
    local DOMAIN=$5
    local IP=$6

    case $OP in
    "sqlIP")
        COMMAND="gcloud beta sql instances describe"
        FORMAT="--format='value(ipAddresses[0].ipAddress)'"
        MESSAGE="Checking if IP is available"
        AWAITING="!BLANK"
        ERROREXPECTED=false
        ;;

    "sqlREADY")
        COMMAND="gcloud beta sql instances describe"
        FORMAT="--format='value(state)'"
        MESSAGE="Checking if database is up"
        AWAITING="RUNNABLE"
        ERROREXPECTED=false
        ;;

    "redisIP")
        COMMAND="gcloud redis instances describe"
        FORMAT="--region=$REGION --format='value(host)'"
        MESSAGE="Checking if IP is available"
        AWAITING="!BLANK"
        ERROREXPECTED=false
        ;;

    "redisGone")
        COMMAND="gcloud redis instances describe"
        FORMAT="--region=$REGION --format='value(host)'"
        MESSAGE="Checking if Redis server is gone"
        AWAITING=""
        ERROREXPECTED=true
        ;;

    "domainREADY")
        COMMAND="gcloud beta domains registrations describe"
        FORMAT="--format='value(state)'"
        MESSAGE="Checking if domain is active "
        AWAITING="ACTIVE"
        ERROREXPECTED=false
        ;;

    "url200")
        COMMAND="curl --write-out '%{http_code}' --resolve $DOMAIN:80:$IP --silent --output /dev/null http://$DOMAIN"
        FORMAT=""
        MESSAGE="Checking if url is returning STATUS OK "
        AWAITING=200
        NAME=""
        ERROREXPECTED=false
        ;;

    *)
        echo "Unknown Operation Type"
        exit 1
        ;;
    esac

    ERROR=false
    VALUE=$(eval $COMMAND $NAME $FORMAT) || ERROR=true

    if [ "$ERROR" = true ]; then
        if [ "$ERROREXPECTED" == true ]; then
            printf "\n"
            eval $__resultvar=""
            return 1
        fi
        printf "Command to poll errored. Exiting\n"
        return 1
    fi

    i=0
    if [ "$AWAITING" = "!BLANK" ]; then
        while [ "$VALUE" = "" ]; do

            i=$(($i + 1))
            if [ $i -eq 1 ]; then
                printf $MESSAGE
            fi

            if [ $i -eq $limit ]; then
                printf "Timed out \n"
                return 1
            fi

            VALUE=$(eval $COMMAND $NAME $FORMAT) || ERROR=true
            if [ "$ERROR" = true ]; then
                if [ "$ERROREXPECTED" == true ]; then
                    printf "\n"
                    eval $__resultvar="''"
                    return 1
                fi
                printf "Command to poll errored. Exiting\n"
                return 1
            fi
            printf "."
            sleep $DURATION
        done
    else
        while [ "$VALUE" != "$AWAITING" ]; do
            i=$(($i + 1))
            if [ $i -eq 1 ]; then
                printf $MESSAGE
            fi

            if [ $i -eq $limit ]; then
                printf "Timed out \n"
                return 1
            fi

            VALUE=$(eval $COMMAND $NAME $FORMAT) || ERROR=true

            if [ "$ERROR" = true ]; then
                if [ "$ERROREXPECTED" == true ]; then
                    printf "\n"
                    eval $__resultvar="''"
                    return 1
                fi
                printf "Command to poll errored. Exiting\n"
                return 1
            fi
            printf "."
            sleep $DURATION
        done
    fi
    printf "\n"
    eval $__resultvar="'$VALUE'"
}