# I think it's a good idea to test your scripts. It's kinda awkward but you'll 
# be happy you did 


# DON'T REMOVE FROM test script.
CYAN='\033[0;36m'
BCYAN='\033[1;36m'
NC='\033[0m' # No Color
DIVIDER=$(printf %"$(tput cols)"s | tr " " "*")
DIVIDER+="\n"

function get_project_id() {
    local __resultvar=$1
    VALUE=$(gcloud config get-value project | xargs)
    eval $__resultvar="'$VALUE'"
}

function get_project_number() {
    local __resultvar=$1
    local PRO=$2
    VALUE=$(gcloud projects list --filter="project_id=$PRO" --format="value(PROJECT_NUMBER)" | xargs)
    eval $__resultvar="'$VALUE'"
}

# DISPLAY HELPERS
function section_open() {
    section_description=$1
    printf "$DIVIDER"
    printf "${CYAN}$section_description${NC} \n"
    printf "$DIVIDER"
}

function section_close() {
    printf "$DIVIDER"
    printf "${CYAN}$section_description ${BCYAN}- done${NC}\n"
    printf "\n\n"
}

function evalTest() {
    local command=$1
    local expected=$2

    local ERR=""
    got=$(eval $command 2>errFile)
    ERR=$(<errFile)

    if [ ${#ERR} -gt 0 ]; then
        if [ "$expected" = "EXPECTERROR" ]; then
            printf "Expected Error thrown \n"
            return
        fi

        printf "Halting - error: '$ERR'  \n"
        exit 1
    fi

    if [ "$got" != "$expected" ]; then
        printf "Halting: '$got'  \n"
        exit 1
    fi

    printf "$expected is ok\n"
}

function generateProject(){
    local __resultvar=$1
    local __STACKSUFFIX=$2
    local __RANDOMSUFFIX=$(
        LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 8
        echo
    )
    local __DATELABEL=$(date +%F)
    local VALUE=ds-test-$__STACKSUFFIX-$__RANDOMSUFFIX
    gcloud projects create $VALUE --labels="deploystack-disposable-test-project=$__DATELABEL" --folder="155265971980"
    echo "Created project $VALUE - now to enable billing"
    gcloud services enable cloudbilling.googleapis.com --project=$VALUE -q 
    echo "cloudbilling.googleapis.com enabled on project $VALUE"
    local __BA=$(gcloud beta billing accounts list --format="value(ACCOUNT_ID)" --limit=1 | xargs)
    gcloud beta billing projects link $VALUE --billing-account=$__BA
    eval $__resultvar="'$VALUE'"
}

# END DON'T REMOVE FROM test script.

suffix=ncs


# This is only needed if you tests fail alot because of overlaping runs of the
# same set of tests.
section_open "Generate random test project"
    generateProject PROJECT "$suffix"
section_close


gcloud services enable cloudresourcemanager.googleapis.com --project=$PROJECT
REGION=us-central1
ZONE=us-central1-a
BASENAME=mongo-client-server
terraformDIR=terraform

CLIENT=client
SERVER=server

gcloud config set project ${PROJECT}

terraform -chdir="$terraformDIR" init
terraform -chdir="$terraformDIR" apply -auto-approve \
    -var project_id="${PROJECT}" \
    -var zone="${ZONE}" \
    -var basename="${BASENAME}" \
    -var region="${REGION}" 


section_open "Test Client Instance"
    evalTest 'gcloud compute instances describe $CLIENT --zone="$ZONE" --format="value(name)"'  $CLIENT
section_close

section_open "Test Server Instance"
    evalTest 'gcloud compute instances describe $SERVER --zone="$ZONE" --format="value(name)"'  $SERVER
section_close

section_open "Test Network"
    evalTest 'gcloud compute networks describe $BASENAME-network --format="value(name)"'  "$BASENAME-network"
section_close

section_open "Test HTTP Firewall Rule"
    evalTest 'gcloud compute firewall-rules describe deploystack-allow-http --format="value(name)"'  "deploystack-allow-http"
section_close

section_open "Test SSH Firewall Rule"
    evalTest 'gcloud compute firewall-rules describe deploystack-allow-ssh --format="value(name)"'  "deploystack-allow-ssh"
section_close

section_open "Test Internal Firewall Rule"
    evalTest 'gcloud compute firewall-rules describe deploystack-allow-internal --format="value(name)"'  "deploystack-allow-internal"
section_close

section_open "Test Client is running"
    CLIENT=$(terraform -chdir="$terraformDIR" output client_url)
    CLIENT=${CLIENT//\"/}
    CLIENT=${CLIENT//http:\/\//}
    echo "Testing $CLIENT"

    attempt_counter=0
    max_attempts=50

    until $(curl --output /dev/null --silent --head --fail http://$CLIENT); do
        if [ ${attempt_counter} -eq ${max_attempts} ];then
        echo "Max attempts reached"
        exit 1
        fi

        printf '.'
        attempt_counter=$(($attempt_counter+1))
        sleep 5
    done
section_close

terraform -chdir="$terraformDIR" destroy -auto-approve \
    -var project_id="${PROJECT}" \
    -var zone="${ZONE}" \
    -var basename="${BASENAME}" \
    -var region="${REGION}" 

section_open "Test Internal Firewall Rule does not exist"
    evalTest 'gcloud compute firewall-rules describe deploystack-allow-internal --format="value(name)"'  "EXPECTERROR"
section_close

section_open "Test ssh Firewall Rule does not exist"
    evalTest 'gcloud compute firewall-rules deploystack-allow-ssh --format="value(name)"'  "EXPECTERROR"
section_close

section_open "Test http Firewall Rule does not exist"
    evalTest 'gcloud compute firewall-rules deploystack-allow-http --format="value(name)"'  "EXPECTERROR"
section_close

section_open "Test Network does not exist"
    evalTest 'gcloud compute networks describe $BASENAME-network --format="value(name)"' "EXPECTERROR"
section_close


section_open "Test Client Instance"
    evalTest 'gcloud compute instances describe $CLIENT --zone="$ZONE" --format="value(name)"'  "EXPECTERROR"
section_close

section_open "Test Server Instance"
    evalTest 'gcloud compute instances describe $SERVER --zone="$ZONE" --format="value(name)"'  "EXPECTERROR"
section_close



printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You got the end the of your test with everything working. \n"
printf "$DIVIDER"