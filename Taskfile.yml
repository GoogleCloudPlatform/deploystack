version: "3"
env:
  CONTAINER: deploystack
  TERRAFORM_VERSION: $TERRAFORM_VERSION
  DS_BASE_VERSION: $DS_BASE_VERSION
  DS_GITHUB_VERSION: $DS_GITHUB_VERSION
  DS_TUI_VERSION: $DS_TUI_VERSION
  DS_GCLOUD_VERSION: $DS_GCLOUD_VERSION
  DS_CONFIG_VERSION: $DS_CONFIG_VERSION
  DEPLOYSTACK_PATH: $DEPLOYSTACK_PATH
  DEPLOYSTACK_SHELL_PATH: $DEPLOYSTACK_SHELL_PATH

tasks:

  docker:lint:
    dir: docker
    desc: Check on build details
    cmds:
      - ./linter.sh

  docker:clean:
    ignore_error: true
    dir: docker
    desc: Clean Docker related artifacts
    cmds:
      - docker stop {{.CONTAINER}}
      - docker rm {{.CONTAINER}}
  docker:build:
    dir: docker
    deps:
      - docker:clean
      - docker:lint
    desc: Build Docker image
    cmds:
      - |
        docker build --build-arg TERRAFORM_VERSION={{.TERRAFORM_VERSION}} \
        --build-arg DS_BASE_VERSION={{.DS_BASE_VERSION}} \
        --build-arg DS_GITHUB_VERSION={{.DS_GITHUB_VERSION}} \
        --build-arg DS_TUI_VERSION={{.DS_TUI_VERSION}} \
        --build-arg DS_GCLOUD_VERSION={{.DS_GCLOUD_VERSION}} \
        --build-arg DS_CONFIG_VERSION={{.DS_CONFIG_VERSION}} \
        -t {{.CONTAINER}} .

  docker:run:
    deps:
      - docker:build
    desc: Run the docker image
    cmds:
      - |
        docker run --platform linux/amd64 --rm -it --name {{.CONTAINER}} -v ~/.config:/root/.config  -d {{.CONTAINER}}
        docker exec -it {{.CONTAINER}} bash  


  update:
    desc: Update files that tests depend on
    dir: tools/test_files_updater
    cmds:
      - ./update

  creds.json:
    desc: Gets teh details for the creds file, assuming you have permission
    cmds:
      - |
        gcloud secrets versions access latest --secret=creds \
        --project={{.DEPLOYSTACK_TEST_PROJECT}} > creds.json

  test:
    desc: Run all tests
    deps:
      - deploystack:test
      - tui:test
      - gcloud:test
      - github:test
      - terraform:test
      - config:test
      - dstester:test

  test:verbose: 
    desc: Run all tests
    deps:
      - deploystack:test:verbose
      - tui:test:verbose
      - gcloud:test:verbose
      - github:test:verbose
      - terraform:test:verbose
      - config:test:verbose
      - dstester:test:verbose

  go:clean:
   desc: Cleans the caches before running tests
   run: once
   cmds: 
      - go clean -testcache
  
  deploystack:test:
    desc: Tests the deploystack package
    deps:
      - go:clean
    cmds: 
      - go test .  -cover

  deploystack:tidy:
    desc: updates modules for deploystack
    cmds: 
      - go get -u
      - go mod tidy
  
  tui:tidy:
     desc: updates modules for tui
     dir: tui
     cmds: 
      - go get -u
      - go mod tidy

  gcloud:tidy:
     desc: updates modules for gcloud
     dir: gcloud
     cmds: 
      - go get -u
      - go mod tidy

  config:tidy:
     desc: updates modules for config
     dir: config
     cmds: 
      - go get -u
      - go mod tidy
  
  github:tidy:
     desc: updates modules for github
     dir: github
     cmds: 
      - go get -u
      - go mod tidy
  
  terraform:tidy:
     desc: updates modules for terraform
     dir: terraform
     cmds: 
      - go get -u
      - go mod tidy        

  all:tidy:
     desc: updates modules for all
     dir: config
     cmds: 
      - task: config:tidy
      - task: gcloud:tidy   
      - task: github:tidy   
      - task: terraform:tidy   
      - task: deploystack:tidy    

  tui:test:
    desc: Tests the tui package
    deps:
      - go:clean
    dir: tui
    cmds: 
      - go test .  -cover
 
  gcloud:test:
    desc: Tests the gcloud package
    deps:
      - go:clean
    dir: gcloud
    cmds: 
      - go test .  -cover     
 
  config:test:
    desc: Tests the config package
    deps:
      - go:clean
    dir: config
    cmds: 
      - go test .  -cover     
 
  terraform:test:
    desc: Tests the terraform package
    deps:
      - go:clean
    dir: terraform
    cmds: 
      - go test .  -cover
 
  github:test:
    desc: Tests the github package
    deps:
      - go:clean
    dir: github
    cmds: 
      - go test .  -cover 
 
  dstester:test:
    desc: Tests the dstester package
    deps:
      - go:clean
    dir: dstester
    cmds: 
      - go test .  -cover         

  deploystack:test:verbose:
    desc: Tests the deploystack package
    deps:
      - go:clean
    cmds: 
      - go test .  -v
 
  tui:test:verbose:
    desc: Tests the tui package
    deps:
      - go:clean
    dir: tui
    cmds: 
      - go test .  -v
 
  gcloud:test:verbose:
    desc: Tests the gcloud package
    deps:
      - go:clean
    dir: gcloud
    cmds: 
      - go test .  -v     
 
  config:test:verbose:
    desc: Tests the config package
    deps:
      - go:clean
    dir: config
    cmds: 
      - go test .  -v     
 
  terraform:test:verbose:
    desc: Tests the terraform package
    deps:
      - go:clean
    dir: terraform
    cmds: 
      - go test .  -v
 
  github:test:verbose:
    desc: Tests the github package
    deps:
      - go:clean
    dir: github
    cmds: 
      - go test .  -v 
 
  dstester:test:verbose:
    desc: Tests the dstester package
    deps:
      - go:clean
    dir: dstester
    cmds: 
      - go test .  -v

  dsexec:clean:
    desc: Cleans the generated files of the dsexec binary
    ignore_error: true
    dir: docker
    cmds:
      - rm dsexec
      - rm go.mod
      - rm go.sum
      - rm buildTime
      - rm versionDS
      - rm versionGcloud
      - rm versionTUI
      - rm versionConfig
      - rm versionTerraform
      - rm -r -- ./*/

  dsexec:build:
    desc: Builds a local version of dsexec
    dir: docker
    deps:
      - dsexec:clean
      - go:clean
    cmds:
      - go mod init dsexec
      - go get github.com/GoogleCloudPlatform/deploystack@v1.11.3 
      - go mod tidy
      - go mod edit -replace github.com/GoogleCloudPlatform/deploystack={{.DEPLOYSTACK_PATH}}
      - ./version.sh
      - go build -o dsexec deploystack_exec.go


  dsexec:install:
    desc: Installs a local version of dsexec
    dir: docker
    deps:
      - dsexec:build
    cmds:
      - sudo cp dsexec /usr/local/bin/
      - sudo cp deploystack /usr/local/bin/

  cloud:test:
    desc: Runs the cloudbuild testing job without a git push
    cmds:
      - gcloud builds submit --config test.yaml 

  shell:experimental:
    desc: pushes to experimental branch      
    cmds: 
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git checkout experimental
      - task: shell:export

  shell:master:
    desc: pushes to master branch      
    cmds: 
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git checkout master
      - task: shell:export

  shell:main:
    desc: pushes to main branch      
    cmds: 
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git checkout main
      - task: shell:export    

  shell:export:
    desc: Copies key files to the shell image locally.      
    cmds: 
      - cp docker/deploystack {{.DEPLOYSTACK_SHELL_PATH}}
      - cp docker/deploystack_exec.go {{.DEPLOYSTACK_SHELL_PATH}}/ds
      - cp docker/version.sh {{.DEPLOYSTACK_SHELL_PATH}}/ds
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git add .
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git commit -m "chore:update from deploystack core version"
      - cd {{.DEPLOYSTACK_SHELL_PATH}} && git push

      